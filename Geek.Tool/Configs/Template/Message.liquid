//auto generated, do not modify it
//限制：命名不能以下划线结尾(可能冲突)
//限制：map的key只支持基础类型和string；
//兼容限制：字段只能添加，添加后不能删除，添加字段只能添加到最后,添加消息类型只能添加到最后
//兼容限制：不能修改字段类型（如从bool改为long）
//兼容限制：消息类型(含msdId)不能作为其他消息的成员类型

{{~ if isenum ~}}
namespace {{space}}
{
	public enum {{name}}
	{
		{{~ for name in enumvalues ~}}
		{{name}}
		{{~ end ~}}
	}
}
{{~ else ~}}

using System;
using System.Text;
using Geek.Server;
using System.Collections.Generic;
{{~ for use in usingspaces ~}}
using {{use}};
{{~ end ~}}

{{ if explain != "" }}///<summary>{{explain}}</summary>{{ end }}
namespace {{space}}
{
	{{~ if isstate ~}}
	[IsState]
	{{~ end ~}}
    public class {{name}} : {{super}}
	{

		static {{name}}()
		{
			Geek.Server.SerializerOptions.Resolver = Geek.Server.Proto.SerializeResolver.Instance;
		}

		{{~ if isstate ~}}

		/*********************************************************/
		{{~ for field in fields ~}}
		private {{field.clsname}} _{{field.name}}_{{field.definecode}};
		public {{field.clsname}} {{field.name}} 
		{ 
			get{ return _{{field.name}}_; }
			set{ _{{field.name}}_= value; _stateChanged=true;}
		}
		{{~ end ~}}


		///<summary>状态是否改变</summary>
		public override bool IsChanged
		{
			get
			{
				if(_stateChanged)
					return true;
				{{~ for field in fields ~}}
				{{~ if field.iscustom || field.iscollection ~}}
				if({{field.name}}.IsChanged)
					return true;
				{{~ end ~}}
				{{~ end ~}}
				return false;
			}
		}
		
		///<summary>清除所有改变[含子项]</summary>
		public override void ClearChanges()
		{
			_stateChanged = false;
			{{~ for field in fields ~}}
			{{~ if field.iscustom || field.iscollection ~}}
			{{field.name}}.ClearChanges();
			{{~ end ~}}
			{{~ end ~}}
		}
		/*********************************************************/

		{{~ else ~}} {{~#非State模式~}}

		/*********************************************************/
		{{~ for field in fields ~}}
		public {{field.clsname}} {{field.name}} {get;set;}{{field.definecode}}
		{{~ end ~}}
		/*********************************************************/

		{{~ end ~}}  {{~#end of state~}}

		{{~ if msgid != 0 ~}}
		public const int MsgID = SID;
		{{~ end ~}}		
		public override int Sid { get;} = {{sid}};
		{{~ if issubclass ~}}
		public new const int SID = {{sid}};
		{{~ else ~}}
		public const int SID = {{sid}};
		{{~ end ~}}
		{{~ if issubclass ~}}
		public new const bool IsState = {{isstate}};
		{{~ else ~}}
		public const bool IsState = {{isstate}};
		{{~ end ~}}

		public override T Create<T>(int sid)
        {
            return Geek.Server.Proto.SClassFactory.Create<T>(sid);
        }

		///<summary>反序列化，读取数据</summary>
        public override int Read(Span<byte> _buffer_, int _offset_)
		{
			{{~ if msgid != 0 ~}}
			UniId = XBuffer.ReadInt(_buffer_, ref _offset_);
			{{~ end ~}}
			_offset_ = base.Read(_buffer_, _offset_);
			{{~ if msgid == 0 ~}}
			int _startOffset_ = _offset_;
			int _toReadLength_ = XBuffer.ReadInt(_buffer_, ref _offset_);
			{{~ end ~}}
			
			//字段个数,最多支持255个
			var _fieldNum_ = XBuffer.ReadByte(_buffer_, ref _offset_);
			
			{{~ readIdx = -1 ~}}
			do {
				{{~ for field in fields ~}}
				{{~ readIdx = readIdx + 1 ~}}
				if(_fieldNum_ > {{readIdx}})
				{
					{{~ if field.iscollection ~}}   {{~#处理collection~}}

					{{~ if field.isnest ~}}
					{{field.name}} = ReadCollection<{{field.clsname}}>(_buffer_, ref _offset_);
					{{~ else ~}}
					{{field.readcollectioncode}}
					{{~ end ~}}

					{{~ else if field.iscustom ~}}
					{{field.name}} = ReadCustom<{{field.clsname}}>({{field.name}}, _buffer_, ref _offset_);

					{{~ else if field.isprimitive ~}}  {{~#primitive字段 ~}}
					{{field.name}} = {{field.readcode}};

					{{~ end ~}}{{~#end if collection}}
				}else break;
				{{~ end ~}}{{~#foreach end fields~}}
			}while(false);
			
			{{~ if msgid == 0 ~}}
			//剔除多余数据
			if(_offset_ < _toReadLength_ - _startOffset_)
				_offset_ += _toReadLength_ - _startOffset_;
			{{~ end ~}}
			return _offset_;
		}

		
		///<summary>序列化，写入数据</summary>
        public override int Write(Span<byte> _buffer_, int _offset_)
        {	
			{{~ if msgid != 0 ~}}
			XBuffer.WriteInt(UniId, _buffer_, ref _offset_);
			{{~ end ~}}
			_offset_ = base.Write(_buffer_, _offset_);
			{{~ if msgid == 0 ~}}
			//先写入当前对象长度占位符
			{{~ #msg不需要,结构体才需要,msg加了字段不影响,消息中只能包含结构体，不能包含其他消息 ~}}
			int _startOffset_ = _offset_;
			XBuffer.WriteInt(0, _buffer_, ref _offset_);
			{{~ end ~}}
			
			//写入字段数量,最多支持255个
			{{~ fieldNum = (fields | array.size) ~}}
			XBuffer.WriteByte({{fieldNum}}, _buffer_, ref _offset_);
			{{~ if fieldNum > 255 ~}}
			throw new System.Exception("单个协议类型最多支持255个字段，当前{{fieldNum}}个");
			{{~ end ~}}
			
			//写入数据
			{{~ for field in fields ~}}

			{{~ if field.iscollection ~}}

			{{~ if field.isnest ~}}
			WriteCollection<{{field.clsname}}>({{field.name}}, _buffer_, ref _offset_);
			{{~ else ~}}
			{{field.writecollectioncode}}
			{{~ end ~}}

			{{~ else if field.iscustom ~}}
			WriteCustom<{{field.clsname}}>({{field.name}}, _buffer_, ref _offset_);
			
			{{~ else if field.isprimitive ~}} {{~#primitive字段 ~}}
			{{ field.writecode }};

			{{~ end ~}}{{~#if field.iscollection ~}}
			{{~ end ~}}{{~#foreach state.fields~}}
			
			{{~ if msgid == 0 ~}}
			//覆盖当前对象长度
			XBuffer.WriteInt(_offset_ - _startOffset_, _buffer_, ref _startOffset_);
			{{~ end ~}}
			return _offset_;
		}


		/*********************************************************/
		public override int GetSerializeLength()
		{
			int len = 0;

			{{~ if msgid == 0 ~}}
			len += XBuffer.IntSize; //true length
			{{~ else ~}}
			len += XBuffer.IntSize; //UniId
			{{~ end ~}}

			len += XBuffer.ByteSize; //_fieldNum_

			{{~ for field in fields ~}}
			//{{field.name}}
			{{ field.lengthcode }}
			{{~ end ~}}{{~#foreach state.fields~}}

			return len;
		}
	}
}
{{~ end ~}} {{~#is枚举 ~}}