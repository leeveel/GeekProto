//auto generated, do not modify it
//限制：命名不能以下划线结尾(可能冲突)
//限制：map的key只支持基础类型和string；list/map不能optional,list/map不能嵌套
//兼容限制：字段只能添加，添加后不能删除，添加字段只能添加到最后,添加消息类型只能添加到最后
//兼容限制：不能修改字段类型（如从bool改为long）
//兼容限制：消息类型(含msdId)不能作为其他消息的成员类型


using Core.Serialize;
{{~ for use in usingspaces ~}}
using {{use}};
{{~ end ~}}
{{~ LogFunc = "LOGGER.Error" ~}}

{{ if explain != "" }}///<summary>{{explain}}</summary>{{ end }}
namespace {{space}}
{
	{{~ readMap = {"int":"XBuffer.ReadInt(_buffer_, ref _offset_)",
				"long":"XBuffer.ReadLong(_buffer_, ref _offset_)",
				"bool":"XBuffer.ReadBool(_buffer_, ref _offset_)",
				"string":"XBuffer.ReadString(_buffer_, ref _offset_)",
				"short":"XBuffer.ReadShort(_buffer_, ref _offset_)",
				"float":"XBuffer.ReadFloat(_buffer_, ref _offset_)",
				"double":"XBuffer.ReadDouble(_buffer_, ref _offset_)",
				"byte[]":"XBuffer.ReadBytes(_buffer_, ref _offset_)"} ~}}
	{{~ writeMap = {"int":"XBuffer.WriteInt(%s, _buffer_, ref _offset_)",
				"long":"XBuffer.WriteLong(%s, _buffer_, ref _offset_)",
				"bool":"XBuffer.WriteBool(%s, _buffer_, ref _offset_)",
				"string":"XBuffer.WriteString(%s, _buffer_, ref _offset_)",
				"short":"XBuffer.WriteShort(%s, _buffer_, ref _offset_)",
				"float":"XBuffer.WriteFloat(%s, _buffer_, ref _offset_)",
				"double":"XBuffer.WriteDouble(%s, _buffer_, ref _offset_)",
				"byte[]":"XBuffer.WriteBytes(%s, _buffer_, ref _offset_)"} ~}}
	
    public partial class {{name}} : {{super}}
	{
		static readonly NLog.Logger LOGGER = NLog.LogManager.GetCurrentClassLogger();
		{{~ if msgid != 0 ~}}
        public override int MsgId { get; } = {{msgid}};
		{{~ end ~}}
		
		public override int Sid { get; set;} = {{sid}};

		public override T Create<T>(int sid)
        {
            return Proto.SClassFactory.Create<T>(sid);
        }

		///<summary>反序列化，读取数据</summary>
        public override int Read(byte[] _buffer_, int _offset_)
		{
			{{~ if msgid != 0 ~}}
			UniId = XBuffer.ReadInt(_buffer_, ref _offset_);
			{{~ end ~}}
			_offset_ = base.Read(_buffer_, _offset_);
			{{~ if msgid == "" ~}}
			int _startOffset_ = _offset_;
			int _toReadLength_ = XBuffer.ReadInt(_buffer_, ref _offset_);
			{{~ end ~}}
			
			//字段个数,最多支持255个
			var _fieldNum_ = XBuffer.ReadByte(_buffer_, ref _offset_);
			
			{{~ readIdx = -1 ~}}
			do {
				{{~ for field in fields ~}}
				{{~ readIdx = readIdx + 1 ~}}
				if(_fieldNum_ > {{readIdx}})
				{
					{{~ if field.type == "list" || field.type == "set" ~}}   {{~#处理list和set~}}
					
					/*********************************************************/
					{{~ if readMap[field.clsname1] || field.isenum ~}}
					ReadPrimitiveCollection<{{field.clsname1}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ else ~}}
					ReadCustomCollection<{{field.clsname1}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ end ~}}
					/*********************************************************/

					{{~ else if field.type == "map" ~}}

					{{~ if field.nestmodel == 0 ~}}   {{~#无嵌套模式~}}
					
					/*********************************************************/
					{{~ if readMap[field.clsname2] || field.isenum ~}}
					ReadPrimitiveMap<{{field.clsname1}}, {{field.clsname2}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ else ~}}
					ReadCustomMap<{{field.clsname1}}, {{field.clsname2}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ end ~}}
					/*********************************************************/

					{{~ else if field.nestmodel == 1 ~}}  {{~#嵌套List/Set模式~}}


					/*********************************************************/
					{{~ if readMap[field.clsname3] || field.isenum ~}}
					ReadNestPrimitiveList<{{field.clsname1}}, {{field.clsname3}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ else ~}}
					ReadNestCustomList<{{field.clsname1}}, {{field.clsname3}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ end ~}}
					/*********************************************************/

					{{~ else if field.nestmodel == 2 ~}}  {{~#嵌套set模式~}}


					/*********************************************************/
					{{~ if readMap[field.clsname3] || field.isenum ~}}
					ReadNestPrimitiveSet<{{field.clsname1}}, {{field.clsname3}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ else ~}}
					ReadNestCustomSet<{{field.clsname1}}, {{field.clsname3}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ end ~}}
					/*********************************************************/

					{{~ else if field.nestmodel == 3 ~}}  {{~#嵌套Map模式~}}

					/*********************************************************/
					{{~ if readMap[field.clsname4] || field.isenum ~}}
					ReadNestPrimitiveMap<{{field.clsname1}}, {{field.clsname3}}, {{field.clsname4}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ else ~}}
					ReadNestCustomMap<{{field.clsname1}}, {{field.clsname3}}, {{field.clsname4}}>({{field.name}}, _buffer_, ref _offset_);
					{{~ end ~}}
					/*********************************************************/

					{{~ end ~}} {{~#end of nestmodel ~}}

					{{~ else ~}} {{~#普通字段 ~}}

					{{~ if readMap[field.clsname1] || field.isenum ~}}
					{{field.name}} = ReadPrimitive<{{field.clsname1}}>({{~ field.optional ~}},  _buffer_, ref _offset_);
					{{~ else ~}}
					{{field.name}} = ReadCustom<{{field.clsname1}}>({{field.name}}, {{~ field.optional ~}},  _buffer_, ref _offset_);
					{{~ end ~}}

					{{~ end ~}}{{~#end if list}}
				}else break;
				{{~ end ~}}{{~#foreach end fields~}}
			}while(false);
			
			{{~ if msgid == "" ~}}
			//剔除多余数据
			if(_offset_ < _toReadLength_ - _startOffset_)
				_offset_ += _toReadLength_ - _startOffset_;
			{{~ end ~}}
			return _offset_;
		}

		
		///<summary>序列化，写入数据</summary>
        public override int Write(byte[] _buffer_, int _offset_)
        {	
			{{~ if msgid != 0 ~}}
			XBuffer.WriteInt(UniId, _buffer_, ref _offset_);
			{{~ end ~}}
			_offset_ = base.Write(_buffer_, _offset_);
			{{~ if msgid == "" ~}}
			//先写入当前对象长度占位符
			{{~ #msg不需要,结构体才需要,msg加了字段不影响,消息中只能包含结构体，不能包含其他消息 ~}}
			int _startOffset_ = _offset_;
			XBuffer.WriteInt(0, _buffer_, ref _offset_);
			{{~ end ~}}
			
			//写入字段数量,最多支持255个
			{{~ fieldNum = (fields | array.size) ~}}
			XBuffer.WriteByte({{fieldNum}}, _buffer_, ref _offset_);
			{{~ if fieldNum > 255 ~}}
			throw new System.Exception("单个协议类型最多支持255个字段，当前{{fieldNum}}个");
			{{~ end ~}}
			
			//写入数据
			{{~ for field in fields ~}}

			{{~ if field.type == "list" || field.type == "set" ~}}

			/*********************************************************/
			{{~ if writeMap[field.clsname1] || field.isenum ~}}
			_offset_ = WritePrimitiveCollection({{field.name}}, _buffer_, ref _offset_);
			{{~ else ~}}
			_offset_ = WriteCustomCollection({{field.name}}, _buffer_, ref _offset_);
			{{~ end ~}}
			/*********************************************************/
			
			{{~else if field.type == "map"~}}

			{{~ if field.nestmodel == 0 ~}}
			
			/*********************************************************/
			{{~ if writeMap[field.clsname1] || field.isenum ~}}
			_offset_ = WritePrimitiveMap({{field.name}}, _buffer_, ref _offset_);
			{{~ else ~}}
			_offset_ = WriteCustomMap({{field.name}}, _buffer_, ref _offset_);
			{{~ end ~}}
			/*********************************************************/

			{{~ else if field.nestmodel == 1 ~}} {{~#嵌套List模式~}}


			/*********************************************************/
			{{~ if writeMap[field.clsname3] || field.isenum ~}}
			_offset_ = WriteNestPrimitiveList({{field.name}}, _buffer_, ref _offset_);
			{{~ else ~}}
			_offset_ = WriteNestCustomList({{field.name}}, _buffer_, ref _offset_);
			{{~ end ~}}
			/*********************************************************/


			{{~ else if field.nestmodel == 2 ~}} {{~#嵌套Set模式~}}


			/*********************************************************/
			{{~ if writeMap[field.clsname3] || field.isenum ~}}
			_offset_ = WriteNestPrimitiveSet({{field.name}}, _buffer_, ref _offset_);
			{{~ else ~}}
			_offset_ = WriteNestCustomSet({{field.name}}, _buffer_, ref _offset_);
			{{~ end ~}}
			/*********************************************************/

			{{~ else if field.nestmodel == 3 ~}}  {{~#嵌套Map模式~}}

			{{~ if writeMap[field.clsname4] || field.isenum ~}}
			_offset_ = WriteNestPrimitiveMap({{field.name}}, _buffer_, ref _offset_);
			{{~ else ~}}
			_offset_ = WriteNestCustomMap({{field.name}}, _buffer_, ref _offset_);
			{{~ end ~}}

			{{~ end ~}} {{~# end of nestmodel ~}}

			{{~ else ~}}{{~#不是map也不是list~}}
			
			{{~ if readMap[field.clsname1] || field.isenum ~}}
			_offset_ = WritePrimitive({{field.name}}, {{~ field.optional ~}}, {{field.name}}!=default, _buffer_, ref _offset_);
			{{~ else ~}}
			_offset_ = WriteCustom({{field.name}}, {{~ field.optional ~}},   {{field.name}}!=default, _buffer_, ref _offset_);
			{{~ end ~}}

			{{~ end ~}}{{~#if field.type~}}
			{{~ end ~}}{{~#foreach state.fields~}}
			
			{{~ if msgid == "" ~}}
			//覆盖当前对象长度
			XBuffer.WriteInt(_offset_ - _startOffset_, _buffer_, ref _startOffset_);
			{{~ end ~}}
			return _offset_;
		}
	}
}