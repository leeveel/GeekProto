//auto generated, do not modify it

using Core.Serialize;
using System;
using System.Collections.Generic;

namespace Proto
{
	public class SerializeTool
	{
		 static readonly NLog.Logger LOGGER = NLog.LogManager.GetCurrentClassLogger();

        #region Read
        public static T Create<T>(int sid) where T : Serializable
        {
            return SClassFactory.Create<T>(sid);
        }

        public static T ReadCustom<T>(T target, bool optional, byte[] buffer, ref int offset) where T : Serializable
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                {
                    var sid = XBuffer.ReadInt(buffer, ref offset);
                    target = Create<T>(sid);
                    offset = target.Read(buffer, offset);
                }
            }
            else
            {
                var sid = XBuffer.ReadInt(buffer, ref offset);
                target = Create<T>(sid);
                offset = target.Read(buffer, offset);
            }
            return target;
        }

        public static byte Read_byte(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadByte(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadByte(buffer, ref offset);
            }
        }
        public static sbyte Read_sbyte(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadSByte(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadSByte(buffer, ref offset);
            }
        }
        public static bool Read_bool(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadBool(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadBool(buffer, ref offset);
            }
        }
        public static short Read_short(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadShort(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadShort(buffer, ref offset);
            }
        }
        public static int Read_int(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadInt(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadInt(buffer, ref offset);
            }
        }
        public static long Read_long(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadLong(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadLong(buffer, ref offset);
            }
        }
        public static float Read_float(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadFloat(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadFloat(buffer, ref offset);
            }
        }
        public static double Read_double(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadDouble(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadDouble(buffer, ref offset);
            }
        }
        public static string Read_string(bool optional, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                var hasVal = XBuffer.ReadBool(buffer, ref offset);
                if (hasVal)
                    //return XBuffer.Read<T>(buffer, ref offset);
                    return XBuffer.ReadString(buffer, ref offset);
                else
                    return default;
            }
            else
            {
               return XBuffer.ReadString(buffer, ref offset);
            }
        }

        /// <summary>
        /// 自定义类型 list-set
        /// </summary>
        public static int ReadCustomCollection<T>(ICollection<T> target, byte[] buffer, ref int offset) where T : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target.Add(default);
                    continue;
                }
                var val = Create<T>(sid);
                offset = val.Read(buffer, offset);
                target.Add(val);
            }
            return offset;
        }

        /// <summary>
        /// 基础类型 list-set
        /// </summary>
        public static int Read_byte_Collection(ICollection<byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadByte(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_sbyte_Collection(ICollection<sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadSByte(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_bool_Collection(ICollection<bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadBool(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_short_Collection(ICollection<short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadShort(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_int_Collection(ICollection<int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadInt(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_long_Collection(ICollection<long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadLong(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_float_Collection(ICollection<float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadFloat(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_double_Collection(ICollection<double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadDouble(buffer, ref offset));
            }
            return offset;
        }
        public static int Read_string_Collection(ICollection<string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                target.Add(XBuffer.ReadString(buffer, ref offset));
            }
            return offset;
        }

        /// <summary>
        /// 自定义类型 dictionary
        /// </summary>
        public static int Read_byte_CustomMap<V>(Dictionary<byte, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_CustomMap<V>(Dictionary<sbyte, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_CustomMap<V>(Dictionary<bool, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_CustomMap<V>(Dictionary<short, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_CustomMap<V>(Dictionary<int, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_CustomMap<V>(Dictionary<long, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_CustomMap<V>(Dictionary<float, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_CustomMap<V>(Dictionary<double, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_CustomMap<V>(Dictionary<string, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var sid = XBuffer.ReadInt(buffer, ref offset);
                if (sid <= 0)
                {
                    target[key] = default;
                    continue;
                }
                var val = Create<V>(sid);
                offset = val.Read(buffer, offset);
                target.Add(key, val);
            }
            return offset;
        }

        /// <summary>
        /// 基础类型 dictionary
        /// </summary>
        public static int Read_byte_byte_Map(Dictionary<byte, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_Map(Dictionary<byte, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_Map(Dictionary<byte, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_Map(Dictionary<byte, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_Map(Dictionary<byte, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_Map(Dictionary<byte, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_Map(Dictionary<byte, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_Map(Dictionary<byte, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_Map(Dictionary<byte, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_Map(Dictionary<sbyte, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_Map(Dictionary<sbyte, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_Map(Dictionary<sbyte, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_Map(Dictionary<sbyte, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_Map(Dictionary<sbyte, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_Map(Dictionary<sbyte, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_Map(Dictionary<sbyte, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_Map(Dictionary<sbyte, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_Map(Dictionary<sbyte, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_Map(Dictionary<bool, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_Map(Dictionary<bool, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_Map(Dictionary<bool, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_Map(Dictionary<bool, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_Map(Dictionary<bool, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_Map(Dictionary<bool, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_Map(Dictionary<bool, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_Map(Dictionary<bool, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_Map(Dictionary<bool, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_Map(Dictionary<short, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_Map(Dictionary<short, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_Map(Dictionary<short, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_Map(Dictionary<short, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_Map(Dictionary<short, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_Map(Dictionary<short, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_Map(Dictionary<short, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_Map(Dictionary<short, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_Map(Dictionary<short, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_Map(Dictionary<int, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_Map(Dictionary<int, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_Map(Dictionary<int, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_Map(Dictionary<int, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_Map(Dictionary<int, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_Map(Dictionary<int, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_Map(Dictionary<int, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_Map(Dictionary<int, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_Map(Dictionary<int, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_Map(Dictionary<long, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_Map(Dictionary<long, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_Map(Dictionary<long, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_Map(Dictionary<long, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_Map(Dictionary<long, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_Map(Dictionary<long, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_Map(Dictionary<long, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_Map(Dictionary<long, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_Map(Dictionary<long, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_Map(Dictionary<float, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_Map(Dictionary<float, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_Map(Dictionary<float, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_Map(Dictionary<float, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_Map(Dictionary<float, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_Map(Dictionary<float, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_Map(Dictionary<float, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_Map(Dictionary<float, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_Map(Dictionary<float, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_Map(Dictionary<double, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_Map(Dictionary<double, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_Map(Dictionary<double, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_Map(Dictionary<double, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_Map(Dictionary<double, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_Map(Dictionary<double, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_Map(Dictionary<double, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_Map(Dictionary<double, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_Map(Dictionary<double, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_Map(Dictionary<string, byte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_Map(Dictionary<string, sbyte> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadSByte(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_Map(Dictionary<string, bool> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadBool(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_Map(Dictionary<string, short> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadShort(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_Map(Dictionary<string, int> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadInt(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_Map(Dictionary<string, long> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadLong(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_Map(Dictionary<string, float> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadFloat(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_Map(Dictionary<string, double> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadDouble(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_Map(Dictionary<string, string> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                //var val = XBuffer.Read<V>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = XBuffer.ReadString(buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套dictionary (基础类型)
        /// </summary>
        public static int Read_byte_byte_byteNestMap(Dictionary<byte, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_sbyteNestMap(Dictionary<byte, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_boolNestMap(Dictionary<byte, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_shortNestMap(Dictionary<byte, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_intNestMap(Dictionary<byte, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_longNestMap(Dictionary<byte, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_floatNestMap(Dictionary<byte, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_doubleNestMap(Dictionary<byte, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_byte_stringNestMap(Dictionary<byte, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_byteNestMap(Dictionary<byte, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_sbyteNestMap(Dictionary<byte, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_boolNestMap(Dictionary<byte, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_shortNestMap(Dictionary<byte, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_intNestMap(Dictionary<byte, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_longNestMap(Dictionary<byte, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_floatNestMap(Dictionary<byte, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_doubleNestMap(Dictionary<byte, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_stringNestMap(Dictionary<byte, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_byteNestMap(Dictionary<byte, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_sbyteNestMap(Dictionary<byte, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_boolNestMap(Dictionary<byte, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_shortNestMap(Dictionary<byte, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_intNestMap(Dictionary<byte, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_longNestMap(Dictionary<byte, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_floatNestMap(Dictionary<byte, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_doubleNestMap(Dictionary<byte, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_stringNestMap(Dictionary<byte, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_byteNestMap(Dictionary<byte, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_sbyteNestMap(Dictionary<byte, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_boolNestMap(Dictionary<byte, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_shortNestMap(Dictionary<byte, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_intNestMap(Dictionary<byte, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_longNestMap(Dictionary<byte, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_floatNestMap(Dictionary<byte, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_doubleNestMap(Dictionary<byte, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_stringNestMap(Dictionary<byte, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_byteNestMap(Dictionary<byte, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_sbyteNestMap(Dictionary<byte, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_boolNestMap(Dictionary<byte, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_shortNestMap(Dictionary<byte, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_intNestMap(Dictionary<byte, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_longNestMap(Dictionary<byte, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_floatNestMap(Dictionary<byte, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_doubleNestMap(Dictionary<byte, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_stringNestMap(Dictionary<byte, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_byteNestMap(Dictionary<byte, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_sbyteNestMap(Dictionary<byte, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_boolNestMap(Dictionary<byte, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_shortNestMap(Dictionary<byte, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_intNestMap(Dictionary<byte, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_longNestMap(Dictionary<byte, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_floatNestMap(Dictionary<byte, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_doubleNestMap(Dictionary<byte, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_stringNestMap(Dictionary<byte, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_byteNestMap(Dictionary<byte, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_sbyteNestMap(Dictionary<byte, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_boolNestMap(Dictionary<byte, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_shortNestMap(Dictionary<byte, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_intNestMap(Dictionary<byte, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_longNestMap(Dictionary<byte, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_floatNestMap(Dictionary<byte, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_doubleNestMap(Dictionary<byte, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_stringNestMap(Dictionary<byte, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_byteNestMap(Dictionary<byte, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_sbyteNestMap(Dictionary<byte, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_boolNestMap(Dictionary<byte, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_shortNestMap(Dictionary<byte, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_intNestMap(Dictionary<byte, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_longNestMap(Dictionary<byte, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_floatNestMap(Dictionary<byte, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_doubleNestMap(Dictionary<byte, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_stringNestMap(Dictionary<byte, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_byteNestMap(Dictionary<byte, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_sbyteNestMap(Dictionary<byte, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_boolNestMap(Dictionary<byte, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_shortNestMap(Dictionary<byte, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_intNestMap(Dictionary<byte, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_longNestMap(Dictionary<byte, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_floatNestMap(Dictionary<byte, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_doubleNestMap(Dictionary<byte, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_stringNestMap(Dictionary<byte, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_byteNestMap(Dictionary<sbyte, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_sbyteNestMap(Dictionary<sbyte, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_boolNestMap(Dictionary<sbyte, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_shortNestMap(Dictionary<sbyte, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_intNestMap(Dictionary<sbyte, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_longNestMap(Dictionary<sbyte, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_floatNestMap(Dictionary<sbyte, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_doubleNestMap(Dictionary<sbyte, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_stringNestMap(Dictionary<sbyte, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_byteNestMap(Dictionary<sbyte, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_sbyteNestMap(Dictionary<sbyte, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_boolNestMap(Dictionary<sbyte, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_shortNestMap(Dictionary<sbyte, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_intNestMap(Dictionary<sbyte, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_longNestMap(Dictionary<sbyte, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_floatNestMap(Dictionary<sbyte, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_doubleNestMap(Dictionary<sbyte, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_stringNestMap(Dictionary<sbyte, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_byteNestMap(Dictionary<sbyte, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_sbyteNestMap(Dictionary<sbyte, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_boolNestMap(Dictionary<sbyte, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_shortNestMap(Dictionary<sbyte, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_intNestMap(Dictionary<sbyte, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_longNestMap(Dictionary<sbyte, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_floatNestMap(Dictionary<sbyte, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_doubleNestMap(Dictionary<sbyte, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_stringNestMap(Dictionary<sbyte, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_byteNestMap(Dictionary<sbyte, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_sbyteNestMap(Dictionary<sbyte, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_boolNestMap(Dictionary<sbyte, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_shortNestMap(Dictionary<sbyte, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_intNestMap(Dictionary<sbyte, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_longNestMap(Dictionary<sbyte, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_floatNestMap(Dictionary<sbyte, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_doubleNestMap(Dictionary<sbyte, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_stringNestMap(Dictionary<sbyte, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_byteNestMap(Dictionary<sbyte, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_sbyteNestMap(Dictionary<sbyte, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_boolNestMap(Dictionary<sbyte, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_shortNestMap(Dictionary<sbyte, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_intNestMap(Dictionary<sbyte, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_longNestMap(Dictionary<sbyte, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_floatNestMap(Dictionary<sbyte, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_doubleNestMap(Dictionary<sbyte, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_stringNestMap(Dictionary<sbyte, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_byteNestMap(Dictionary<sbyte, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_sbyteNestMap(Dictionary<sbyte, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_boolNestMap(Dictionary<sbyte, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_shortNestMap(Dictionary<sbyte, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_intNestMap(Dictionary<sbyte, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_longNestMap(Dictionary<sbyte, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_floatNestMap(Dictionary<sbyte, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_doubleNestMap(Dictionary<sbyte, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_stringNestMap(Dictionary<sbyte, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_byteNestMap(Dictionary<sbyte, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_sbyteNestMap(Dictionary<sbyte, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_boolNestMap(Dictionary<sbyte, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_shortNestMap(Dictionary<sbyte, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_intNestMap(Dictionary<sbyte, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_longNestMap(Dictionary<sbyte, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_floatNestMap(Dictionary<sbyte, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_doubleNestMap(Dictionary<sbyte, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_stringNestMap(Dictionary<sbyte, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_byteNestMap(Dictionary<sbyte, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_sbyteNestMap(Dictionary<sbyte, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_boolNestMap(Dictionary<sbyte, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_shortNestMap(Dictionary<sbyte, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_intNestMap(Dictionary<sbyte, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_longNestMap(Dictionary<sbyte, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_floatNestMap(Dictionary<sbyte, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_doubleNestMap(Dictionary<sbyte, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_stringNestMap(Dictionary<sbyte, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_byteNestMap(Dictionary<sbyte, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_sbyteNestMap(Dictionary<sbyte, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_boolNestMap(Dictionary<sbyte, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_shortNestMap(Dictionary<sbyte, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_intNestMap(Dictionary<sbyte, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_longNestMap(Dictionary<sbyte, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_floatNestMap(Dictionary<sbyte, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_doubleNestMap(Dictionary<sbyte, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_stringNestMap(Dictionary<sbyte, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_byteNestMap(Dictionary<bool, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_sbyteNestMap(Dictionary<bool, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_boolNestMap(Dictionary<bool, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_shortNestMap(Dictionary<bool, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_intNestMap(Dictionary<bool, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_longNestMap(Dictionary<bool, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_floatNestMap(Dictionary<bool, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_doubleNestMap(Dictionary<bool, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_stringNestMap(Dictionary<bool, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_byteNestMap(Dictionary<bool, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_sbyteNestMap(Dictionary<bool, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_boolNestMap(Dictionary<bool, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_shortNestMap(Dictionary<bool, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_intNestMap(Dictionary<bool, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_longNestMap(Dictionary<bool, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_floatNestMap(Dictionary<bool, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_doubleNestMap(Dictionary<bool, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_stringNestMap(Dictionary<bool, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_byteNestMap(Dictionary<bool, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_sbyteNestMap(Dictionary<bool, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_boolNestMap(Dictionary<bool, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_shortNestMap(Dictionary<bool, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_intNestMap(Dictionary<bool, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_longNestMap(Dictionary<bool, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_floatNestMap(Dictionary<bool, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_doubleNestMap(Dictionary<bool, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_stringNestMap(Dictionary<bool, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_byteNestMap(Dictionary<bool, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_sbyteNestMap(Dictionary<bool, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_boolNestMap(Dictionary<bool, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_shortNestMap(Dictionary<bool, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_intNestMap(Dictionary<bool, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_longNestMap(Dictionary<bool, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_floatNestMap(Dictionary<bool, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_doubleNestMap(Dictionary<bool, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_stringNestMap(Dictionary<bool, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_byteNestMap(Dictionary<bool, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_sbyteNestMap(Dictionary<bool, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_boolNestMap(Dictionary<bool, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_shortNestMap(Dictionary<bool, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_intNestMap(Dictionary<bool, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_longNestMap(Dictionary<bool, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_floatNestMap(Dictionary<bool, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_doubleNestMap(Dictionary<bool, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_stringNestMap(Dictionary<bool, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_byteNestMap(Dictionary<bool, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_sbyteNestMap(Dictionary<bool, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_boolNestMap(Dictionary<bool, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_shortNestMap(Dictionary<bool, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_intNestMap(Dictionary<bool, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_longNestMap(Dictionary<bool, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_floatNestMap(Dictionary<bool, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_doubleNestMap(Dictionary<bool, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_stringNestMap(Dictionary<bool, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_byteNestMap(Dictionary<bool, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_sbyteNestMap(Dictionary<bool, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_boolNestMap(Dictionary<bool, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_shortNestMap(Dictionary<bool, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_intNestMap(Dictionary<bool, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_longNestMap(Dictionary<bool, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_floatNestMap(Dictionary<bool, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_doubleNestMap(Dictionary<bool, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_stringNestMap(Dictionary<bool, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_byteNestMap(Dictionary<bool, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_sbyteNestMap(Dictionary<bool, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_boolNestMap(Dictionary<bool, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_shortNestMap(Dictionary<bool, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_intNestMap(Dictionary<bool, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_longNestMap(Dictionary<bool, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_floatNestMap(Dictionary<bool, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_doubleNestMap(Dictionary<bool, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_stringNestMap(Dictionary<bool, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_byteNestMap(Dictionary<bool, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_sbyteNestMap(Dictionary<bool, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_boolNestMap(Dictionary<bool, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_shortNestMap(Dictionary<bool, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_intNestMap(Dictionary<bool, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_longNestMap(Dictionary<bool, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_floatNestMap(Dictionary<bool, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_doubleNestMap(Dictionary<bool, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_stringNestMap(Dictionary<bool, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_byteNestMap(Dictionary<short, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_sbyteNestMap(Dictionary<short, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_boolNestMap(Dictionary<short, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_shortNestMap(Dictionary<short, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_intNestMap(Dictionary<short, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_longNestMap(Dictionary<short, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_floatNestMap(Dictionary<short, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_doubleNestMap(Dictionary<short, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_stringNestMap(Dictionary<short, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_byteNestMap(Dictionary<short, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_sbyteNestMap(Dictionary<short, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_boolNestMap(Dictionary<short, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_shortNestMap(Dictionary<short, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_intNestMap(Dictionary<short, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_longNestMap(Dictionary<short, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_floatNestMap(Dictionary<short, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_doubleNestMap(Dictionary<short, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_stringNestMap(Dictionary<short, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_byteNestMap(Dictionary<short, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_sbyteNestMap(Dictionary<short, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_boolNestMap(Dictionary<short, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_shortNestMap(Dictionary<short, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_intNestMap(Dictionary<short, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_longNestMap(Dictionary<short, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_floatNestMap(Dictionary<short, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_doubleNestMap(Dictionary<short, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_stringNestMap(Dictionary<short, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_byteNestMap(Dictionary<short, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_sbyteNestMap(Dictionary<short, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_boolNestMap(Dictionary<short, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_shortNestMap(Dictionary<short, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_intNestMap(Dictionary<short, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_longNestMap(Dictionary<short, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_floatNestMap(Dictionary<short, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_doubleNestMap(Dictionary<short, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_stringNestMap(Dictionary<short, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_byteNestMap(Dictionary<short, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_sbyteNestMap(Dictionary<short, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_boolNestMap(Dictionary<short, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_shortNestMap(Dictionary<short, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_intNestMap(Dictionary<short, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_longNestMap(Dictionary<short, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_floatNestMap(Dictionary<short, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_doubleNestMap(Dictionary<short, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_stringNestMap(Dictionary<short, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_byteNestMap(Dictionary<short, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_sbyteNestMap(Dictionary<short, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_boolNestMap(Dictionary<short, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_shortNestMap(Dictionary<short, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_intNestMap(Dictionary<short, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_longNestMap(Dictionary<short, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_floatNestMap(Dictionary<short, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_doubleNestMap(Dictionary<short, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_stringNestMap(Dictionary<short, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_byteNestMap(Dictionary<short, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_sbyteNestMap(Dictionary<short, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_boolNestMap(Dictionary<short, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_shortNestMap(Dictionary<short, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_intNestMap(Dictionary<short, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_longNestMap(Dictionary<short, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_floatNestMap(Dictionary<short, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_doubleNestMap(Dictionary<short, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_stringNestMap(Dictionary<short, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_byteNestMap(Dictionary<short, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_sbyteNestMap(Dictionary<short, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_boolNestMap(Dictionary<short, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_shortNestMap(Dictionary<short, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_intNestMap(Dictionary<short, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_longNestMap(Dictionary<short, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_floatNestMap(Dictionary<short, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_doubleNestMap(Dictionary<short, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_stringNestMap(Dictionary<short, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_byteNestMap(Dictionary<short, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_sbyteNestMap(Dictionary<short, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_boolNestMap(Dictionary<short, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_shortNestMap(Dictionary<short, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_intNestMap(Dictionary<short, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_longNestMap(Dictionary<short, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_floatNestMap(Dictionary<short, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_doubleNestMap(Dictionary<short, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_stringNestMap(Dictionary<short, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_byteNestMap(Dictionary<int, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_sbyteNestMap(Dictionary<int, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_boolNestMap(Dictionary<int, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_shortNestMap(Dictionary<int, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_intNestMap(Dictionary<int, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_longNestMap(Dictionary<int, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_floatNestMap(Dictionary<int, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_doubleNestMap(Dictionary<int, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_stringNestMap(Dictionary<int, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_byteNestMap(Dictionary<int, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_sbyteNestMap(Dictionary<int, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_boolNestMap(Dictionary<int, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_shortNestMap(Dictionary<int, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_intNestMap(Dictionary<int, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_longNestMap(Dictionary<int, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_floatNestMap(Dictionary<int, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_doubleNestMap(Dictionary<int, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_stringNestMap(Dictionary<int, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_byteNestMap(Dictionary<int, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_sbyteNestMap(Dictionary<int, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_boolNestMap(Dictionary<int, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_shortNestMap(Dictionary<int, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_intNestMap(Dictionary<int, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_longNestMap(Dictionary<int, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_floatNestMap(Dictionary<int, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_doubleNestMap(Dictionary<int, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_stringNestMap(Dictionary<int, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_byteNestMap(Dictionary<int, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_sbyteNestMap(Dictionary<int, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_boolNestMap(Dictionary<int, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_shortNestMap(Dictionary<int, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_intNestMap(Dictionary<int, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_longNestMap(Dictionary<int, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_floatNestMap(Dictionary<int, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_doubleNestMap(Dictionary<int, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_stringNestMap(Dictionary<int, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_byteNestMap(Dictionary<int, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_sbyteNestMap(Dictionary<int, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_boolNestMap(Dictionary<int, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_shortNestMap(Dictionary<int, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_intNestMap(Dictionary<int, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_longNestMap(Dictionary<int, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_floatNestMap(Dictionary<int, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_doubleNestMap(Dictionary<int, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_stringNestMap(Dictionary<int, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_byteNestMap(Dictionary<int, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_sbyteNestMap(Dictionary<int, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_boolNestMap(Dictionary<int, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_shortNestMap(Dictionary<int, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_intNestMap(Dictionary<int, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_longNestMap(Dictionary<int, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_floatNestMap(Dictionary<int, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_doubleNestMap(Dictionary<int, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_stringNestMap(Dictionary<int, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_byteNestMap(Dictionary<int, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_sbyteNestMap(Dictionary<int, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_boolNestMap(Dictionary<int, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_shortNestMap(Dictionary<int, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_intNestMap(Dictionary<int, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_longNestMap(Dictionary<int, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_floatNestMap(Dictionary<int, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_doubleNestMap(Dictionary<int, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_stringNestMap(Dictionary<int, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_byteNestMap(Dictionary<int, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_sbyteNestMap(Dictionary<int, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_boolNestMap(Dictionary<int, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_shortNestMap(Dictionary<int, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_intNestMap(Dictionary<int, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_longNestMap(Dictionary<int, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_floatNestMap(Dictionary<int, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_doubleNestMap(Dictionary<int, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_stringNestMap(Dictionary<int, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_byteNestMap(Dictionary<int, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_sbyteNestMap(Dictionary<int, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_boolNestMap(Dictionary<int, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_shortNestMap(Dictionary<int, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_intNestMap(Dictionary<int, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_longNestMap(Dictionary<int, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_floatNestMap(Dictionary<int, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_doubleNestMap(Dictionary<int, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_stringNestMap(Dictionary<int, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_byteNestMap(Dictionary<long, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_sbyteNestMap(Dictionary<long, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_boolNestMap(Dictionary<long, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_shortNestMap(Dictionary<long, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_intNestMap(Dictionary<long, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_longNestMap(Dictionary<long, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_floatNestMap(Dictionary<long, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_doubleNestMap(Dictionary<long, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_stringNestMap(Dictionary<long, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_byteNestMap(Dictionary<long, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_sbyteNestMap(Dictionary<long, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_boolNestMap(Dictionary<long, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_shortNestMap(Dictionary<long, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_intNestMap(Dictionary<long, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_longNestMap(Dictionary<long, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_floatNestMap(Dictionary<long, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_doubleNestMap(Dictionary<long, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_stringNestMap(Dictionary<long, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_byteNestMap(Dictionary<long, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_sbyteNestMap(Dictionary<long, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_boolNestMap(Dictionary<long, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_shortNestMap(Dictionary<long, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_intNestMap(Dictionary<long, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_longNestMap(Dictionary<long, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_floatNestMap(Dictionary<long, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_doubleNestMap(Dictionary<long, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_stringNestMap(Dictionary<long, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_byteNestMap(Dictionary<long, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_sbyteNestMap(Dictionary<long, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_boolNestMap(Dictionary<long, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_shortNestMap(Dictionary<long, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_intNestMap(Dictionary<long, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_longNestMap(Dictionary<long, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_floatNestMap(Dictionary<long, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_doubleNestMap(Dictionary<long, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_stringNestMap(Dictionary<long, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_byteNestMap(Dictionary<long, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_sbyteNestMap(Dictionary<long, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_boolNestMap(Dictionary<long, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_shortNestMap(Dictionary<long, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_intNestMap(Dictionary<long, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_longNestMap(Dictionary<long, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_floatNestMap(Dictionary<long, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_doubleNestMap(Dictionary<long, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_stringNestMap(Dictionary<long, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_byteNestMap(Dictionary<long, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_sbyteNestMap(Dictionary<long, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_boolNestMap(Dictionary<long, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_shortNestMap(Dictionary<long, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_intNestMap(Dictionary<long, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_longNestMap(Dictionary<long, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_floatNestMap(Dictionary<long, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_doubleNestMap(Dictionary<long, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_stringNestMap(Dictionary<long, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_byteNestMap(Dictionary<long, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_sbyteNestMap(Dictionary<long, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_boolNestMap(Dictionary<long, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_shortNestMap(Dictionary<long, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_intNestMap(Dictionary<long, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_longNestMap(Dictionary<long, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_floatNestMap(Dictionary<long, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_doubleNestMap(Dictionary<long, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_stringNestMap(Dictionary<long, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_byteNestMap(Dictionary<long, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_sbyteNestMap(Dictionary<long, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_boolNestMap(Dictionary<long, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_shortNestMap(Dictionary<long, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_intNestMap(Dictionary<long, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_longNestMap(Dictionary<long, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_floatNestMap(Dictionary<long, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_doubleNestMap(Dictionary<long, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_stringNestMap(Dictionary<long, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_byteNestMap(Dictionary<long, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_sbyteNestMap(Dictionary<long, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_boolNestMap(Dictionary<long, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_shortNestMap(Dictionary<long, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_intNestMap(Dictionary<long, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_longNestMap(Dictionary<long, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_floatNestMap(Dictionary<long, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_doubleNestMap(Dictionary<long, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_stringNestMap(Dictionary<long, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_byteNestMap(Dictionary<float, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_sbyteNestMap(Dictionary<float, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_boolNestMap(Dictionary<float, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_shortNestMap(Dictionary<float, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_intNestMap(Dictionary<float, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_longNestMap(Dictionary<float, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_floatNestMap(Dictionary<float, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_doubleNestMap(Dictionary<float, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_stringNestMap(Dictionary<float, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_byteNestMap(Dictionary<float, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_sbyteNestMap(Dictionary<float, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_boolNestMap(Dictionary<float, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_shortNestMap(Dictionary<float, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_intNestMap(Dictionary<float, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_longNestMap(Dictionary<float, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_floatNestMap(Dictionary<float, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_doubleNestMap(Dictionary<float, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_stringNestMap(Dictionary<float, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_byteNestMap(Dictionary<float, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_sbyteNestMap(Dictionary<float, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_boolNestMap(Dictionary<float, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_shortNestMap(Dictionary<float, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_intNestMap(Dictionary<float, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_longNestMap(Dictionary<float, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_floatNestMap(Dictionary<float, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_doubleNestMap(Dictionary<float, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_stringNestMap(Dictionary<float, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_byteNestMap(Dictionary<float, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_sbyteNestMap(Dictionary<float, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_boolNestMap(Dictionary<float, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_shortNestMap(Dictionary<float, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_intNestMap(Dictionary<float, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_longNestMap(Dictionary<float, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_floatNestMap(Dictionary<float, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_doubleNestMap(Dictionary<float, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_stringNestMap(Dictionary<float, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_byteNestMap(Dictionary<float, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_sbyteNestMap(Dictionary<float, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_boolNestMap(Dictionary<float, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_shortNestMap(Dictionary<float, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_intNestMap(Dictionary<float, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_longNestMap(Dictionary<float, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_floatNestMap(Dictionary<float, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_doubleNestMap(Dictionary<float, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_stringNestMap(Dictionary<float, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_byteNestMap(Dictionary<float, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_sbyteNestMap(Dictionary<float, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_boolNestMap(Dictionary<float, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_shortNestMap(Dictionary<float, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_intNestMap(Dictionary<float, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_longNestMap(Dictionary<float, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_floatNestMap(Dictionary<float, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_doubleNestMap(Dictionary<float, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_stringNestMap(Dictionary<float, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_byteNestMap(Dictionary<float, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_sbyteNestMap(Dictionary<float, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_boolNestMap(Dictionary<float, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_shortNestMap(Dictionary<float, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_intNestMap(Dictionary<float, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_longNestMap(Dictionary<float, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_floatNestMap(Dictionary<float, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_doubleNestMap(Dictionary<float, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_stringNestMap(Dictionary<float, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_byteNestMap(Dictionary<float, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_sbyteNestMap(Dictionary<float, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_boolNestMap(Dictionary<float, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_shortNestMap(Dictionary<float, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_intNestMap(Dictionary<float, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_longNestMap(Dictionary<float, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_floatNestMap(Dictionary<float, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_doubleNestMap(Dictionary<float, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_stringNestMap(Dictionary<float, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_byteNestMap(Dictionary<float, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_sbyteNestMap(Dictionary<float, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_boolNestMap(Dictionary<float, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_shortNestMap(Dictionary<float, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_intNestMap(Dictionary<float, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_longNestMap(Dictionary<float, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_floatNestMap(Dictionary<float, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_doubleNestMap(Dictionary<float, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_stringNestMap(Dictionary<float, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_byteNestMap(Dictionary<double, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_sbyteNestMap(Dictionary<double, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_boolNestMap(Dictionary<double, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_shortNestMap(Dictionary<double, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_intNestMap(Dictionary<double, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_longNestMap(Dictionary<double, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_floatNestMap(Dictionary<double, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_doubleNestMap(Dictionary<double, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_stringNestMap(Dictionary<double, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_byteNestMap(Dictionary<double, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_sbyteNestMap(Dictionary<double, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_boolNestMap(Dictionary<double, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_shortNestMap(Dictionary<double, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_intNestMap(Dictionary<double, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_longNestMap(Dictionary<double, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_floatNestMap(Dictionary<double, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_doubleNestMap(Dictionary<double, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_stringNestMap(Dictionary<double, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_byteNestMap(Dictionary<double, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_sbyteNestMap(Dictionary<double, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_boolNestMap(Dictionary<double, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_shortNestMap(Dictionary<double, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_intNestMap(Dictionary<double, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_longNestMap(Dictionary<double, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_floatNestMap(Dictionary<double, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_doubleNestMap(Dictionary<double, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_stringNestMap(Dictionary<double, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_byteNestMap(Dictionary<double, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_sbyteNestMap(Dictionary<double, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_boolNestMap(Dictionary<double, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_shortNestMap(Dictionary<double, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_intNestMap(Dictionary<double, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_longNestMap(Dictionary<double, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_floatNestMap(Dictionary<double, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_doubleNestMap(Dictionary<double, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_stringNestMap(Dictionary<double, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_byteNestMap(Dictionary<double, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_sbyteNestMap(Dictionary<double, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_boolNestMap(Dictionary<double, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_shortNestMap(Dictionary<double, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_intNestMap(Dictionary<double, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_longNestMap(Dictionary<double, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_floatNestMap(Dictionary<double, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_doubleNestMap(Dictionary<double, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_stringNestMap(Dictionary<double, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_byteNestMap(Dictionary<double, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_sbyteNestMap(Dictionary<double, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_boolNestMap(Dictionary<double, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_shortNestMap(Dictionary<double, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_intNestMap(Dictionary<double, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_longNestMap(Dictionary<double, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_floatNestMap(Dictionary<double, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_doubleNestMap(Dictionary<double, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_stringNestMap(Dictionary<double, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_byteNestMap(Dictionary<double, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_sbyteNestMap(Dictionary<double, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_boolNestMap(Dictionary<double, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_shortNestMap(Dictionary<double, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_intNestMap(Dictionary<double, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_longNestMap(Dictionary<double, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_floatNestMap(Dictionary<double, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_doubleNestMap(Dictionary<double, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_stringNestMap(Dictionary<double, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_byteNestMap(Dictionary<double, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_sbyteNestMap(Dictionary<double, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_boolNestMap(Dictionary<double, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_shortNestMap(Dictionary<double, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_intNestMap(Dictionary<double, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_longNestMap(Dictionary<double, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_floatNestMap(Dictionary<double, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_doubleNestMap(Dictionary<double, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_stringNestMap(Dictionary<double, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_byteNestMap(Dictionary<double, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_sbyteNestMap(Dictionary<double, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_boolNestMap(Dictionary<double, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_shortNestMap(Dictionary<double, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_intNestMap(Dictionary<double, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_longNestMap(Dictionary<double, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_floatNestMap(Dictionary<double, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_doubleNestMap(Dictionary<double, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_stringNestMap(Dictionary<double, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_byteNestMap(Dictionary<string, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, byte>();         //TODO:类型处理
                Read_byte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_sbyteNestMap(Dictionary<string, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, sbyte>();         //TODO:类型处理
                Read_byte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_boolNestMap(Dictionary<string, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, bool>();         //TODO:类型处理
                Read_byte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_shortNestMap(Dictionary<string, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, short>();         //TODO:类型处理
                Read_byte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_intNestMap(Dictionary<string, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, int>();         //TODO:类型处理
                Read_byte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_longNestMap(Dictionary<string, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, long>();         //TODO:类型处理
                Read_byte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_floatNestMap(Dictionary<string, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, float>();         //TODO:类型处理
                Read_byte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_doubleNestMap(Dictionary<string, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, double>();         //TODO:类型处理
                Read_byte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_stringNestMap(Dictionary<string, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, string>();         //TODO:类型处理
                Read_byte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_byteNestMap(Dictionary<string, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, byte>();         //TODO:类型处理
                Read_sbyte_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_sbyteNestMap(Dictionary<string, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, sbyte>();         //TODO:类型处理
                Read_sbyte_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_boolNestMap(Dictionary<string, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, bool>();         //TODO:类型处理
                Read_sbyte_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_shortNestMap(Dictionary<string, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, short>();         //TODO:类型处理
                Read_sbyte_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_intNestMap(Dictionary<string, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, int>();         //TODO:类型处理
                Read_sbyte_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_longNestMap(Dictionary<string, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, long>();         //TODO:类型处理
                Read_sbyte_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_floatNestMap(Dictionary<string, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, float>();         //TODO:类型处理
                Read_sbyte_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_doubleNestMap(Dictionary<string, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, double>();         //TODO:类型处理
                Read_sbyte_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_stringNestMap(Dictionary<string, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, string>();         //TODO:类型处理
                Read_sbyte_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_byteNestMap(Dictionary<string, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, byte>();         //TODO:类型处理
                Read_bool_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_sbyteNestMap(Dictionary<string, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, sbyte>();         //TODO:类型处理
                Read_bool_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_boolNestMap(Dictionary<string, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, bool>();         //TODO:类型处理
                Read_bool_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_shortNestMap(Dictionary<string, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, short>();         //TODO:类型处理
                Read_bool_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_intNestMap(Dictionary<string, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, int>();         //TODO:类型处理
                Read_bool_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_longNestMap(Dictionary<string, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, long>();         //TODO:类型处理
                Read_bool_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_floatNestMap(Dictionary<string, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, float>();         //TODO:类型处理
                Read_bool_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_doubleNestMap(Dictionary<string, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, double>();         //TODO:类型处理
                Read_bool_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_stringNestMap(Dictionary<string, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, string>();         //TODO:类型处理
                Read_bool_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_byteNestMap(Dictionary<string, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, byte>();         //TODO:类型处理
                Read_short_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_sbyteNestMap(Dictionary<string, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, sbyte>();         //TODO:类型处理
                Read_short_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_boolNestMap(Dictionary<string, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, bool>();         //TODO:类型处理
                Read_short_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_shortNestMap(Dictionary<string, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, short>();         //TODO:类型处理
                Read_short_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_intNestMap(Dictionary<string, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, int>();         //TODO:类型处理
                Read_short_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_longNestMap(Dictionary<string, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, long>();         //TODO:类型处理
                Read_short_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_floatNestMap(Dictionary<string, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, float>();         //TODO:类型处理
                Read_short_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_doubleNestMap(Dictionary<string, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, double>();         //TODO:类型处理
                Read_short_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_stringNestMap(Dictionary<string, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, string>();         //TODO:类型处理
                Read_short_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_byteNestMap(Dictionary<string, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, byte>();         //TODO:类型处理
                Read_int_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_sbyteNestMap(Dictionary<string, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, sbyte>();         //TODO:类型处理
                Read_int_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_boolNestMap(Dictionary<string, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, bool>();         //TODO:类型处理
                Read_int_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_shortNestMap(Dictionary<string, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, short>();         //TODO:类型处理
                Read_int_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_intNestMap(Dictionary<string, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, int>();         //TODO:类型处理
                Read_int_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_longNestMap(Dictionary<string, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, long>();         //TODO:类型处理
                Read_int_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_floatNestMap(Dictionary<string, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, float>();         //TODO:类型处理
                Read_int_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_doubleNestMap(Dictionary<string, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, double>();         //TODO:类型处理
                Read_int_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_stringNestMap(Dictionary<string, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, string>();         //TODO:类型处理
                Read_int_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_byteNestMap(Dictionary<string, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, byte>();         //TODO:类型处理
                Read_long_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_sbyteNestMap(Dictionary<string, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, sbyte>();         //TODO:类型处理
                Read_long_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_boolNestMap(Dictionary<string, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, bool>();         //TODO:类型处理
                Read_long_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_shortNestMap(Dictionary<string, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, short>();         //TODO:类型处理
                Read_long_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_intNestMap(Dictionary<string, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, int>();         //TODO:类型处理
                Read_long_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_longNestMap(Dictionary<string, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, long>();         //TODO:类型处理
                Read_long_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_floatNestMap(Dictionary<string, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, float>();         //TODO:类型处理
                Read_long_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_doubleNestMap(Dictionary<string, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, double>();         //TODO:类型处理
                Read_long_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_stringNestMap(Dictionary<string, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, string>();         //TODO:类型处理
                Read_long_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_byteNestMap(Dictionary<string, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, byte>();         //TODO:类型处理
                Read_float_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_sbyteNestMap(Dictionary<string, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, sbyte>();         //TODO:类型处理
                Read_float_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_boolNestMap(Dictionary<string, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, bool>();         //TODO:类型处理
                Read_float_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_shortNestMap(Dictionary<string, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, short>();         //TODO:类型处理
                Read_float_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_intNestMap(Dictionary<string, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, int>();         //TODO:类型处理
                Read_float_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_longNestMap(Dictionary<string, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, long>();         //TODO:类型处理
                Read_float_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_floatNestMap(Dictionary<string, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, float>();         //TODO:类型处理
                Read_float_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_doubleNestMap(Dictionary<string, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, double>();         //TODO:类型处理
                Read_float_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_stringNestMap(Dictionary<string, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, string>();         //TODO:类型处理
                Read_float_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_byteNestMap(Dictionary<string, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, byte>();         //TODO:类型处理
                Read_double_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_sbyteNestMap(Dictionary<string, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, sbyte>();         //TODO:类型处理
                Read_double_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_boolNestMap(Dictionary<string, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, bool>();         //TODO:类型处理
                Read_double_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_shortNestMap(Dictionary<string, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, short>();         //TODO:类型处理
                Read_double_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_intNestMap(Dictionary<string, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, int>();         //TODO:类型处理
                Read_double_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_longNestMap(Dictionary<string, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, long>();         //TODO:类型处理
                Read_double_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_floatNestMap(Dictionary<string, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, float>();         //TODO:类型处理
                Read_double_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_doubleNestMap(Dictionary<string, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, double>();         //TODO:类型处理
                Read_double_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_stringNestMap(Dictionary<string, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, string>();         //TODO:类型处理
                Read_double_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_byteNestMap(Dictionary<string, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, byte>();         //TODO:类型处理
                Read_string_byte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_sbyteNestMap(Dictionary<string, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, sbyte>();         //TODO:类型处理
                Read_string_sbyte_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_boolNestMap(Dictionary<string, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, bool>();         //TODO:类型处理
                Read_string_bool_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_shortNestMap(Dictionary<string, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, short>();         //TODO:类型处理
                Read_string_short_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_intNestMap(Dictionary<string, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, int>();         //TODO:类型处理
                Read_string_int_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_longNestMap(Dictionary<string, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, long>();         //TODO:类型处理
                Read_string_long_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_floatNestMap(Dictionary<string, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, float>();         //TODO:类型处理
                Read_string_float_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_doubleNestMap(Dictionary<string, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, double>();         //TODO:类型处理
                Read_string_double_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_stringNestMap(Dictionary<string, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, string>();         //TODO:类型处理
                Read_string_string_Map(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套dictionary(自定义类型)
        /// </summary>
        public static int Read_byte_byte_NestCustomMap<V>(Dictionary<byte, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_NestCustomMap<V>(Dictionary<byte, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_NestCustomMap<V>(Dictionary<byte, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_NestCustomMap<V>(Dictionary<byte, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_NestCustomMap<V>(Dictionary<byte, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_NestCustomMap<V>(Dictionary<byte, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_NestCustomMap<V>(Dictionary<byte, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_NestCustomMap<V>(Dictionary<byte, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_NestCustomMap<V>(Dictionary<byte, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_NestCustomMap<V>(Dictionary<sbyte, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_NestCustomMap<V>(Dictionary<sbyte, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_NestCustomMap<V>(Dictionary<sbyte, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_NestCustomMap<V>(Dictionary<sbyte, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_NestCustomMap<V>(Dictionary<sbyte, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_NestCustomMap<V>(Dictionary<sbyte, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_NestCustomMap<V>(Dictionary<sbyte, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_NestCustomMap<V>(Dictionary<sbyte, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_NestCustomMap<V>(Dictionary<sbyte, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_NestCustomMap<V>(Dictionary<bool, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_NestCustomMap<V>(Dictionary<bool, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_NestCustomMap<V>(Dictionary<bool, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_NestCustomMap<V>(Dictionary<bool, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_NestCustomMap<V>(Dictionary<bool, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_NestCustomMap<V>(Dictionary<bool, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_NestCustomMap<V>(Dictionary<bool, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_NestCustomMap<V>(Dictionary<bool, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_NestCustomMap<V>(Dictionary<bool, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_NestCustomMap<V>(Dictionary<short, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_NestCustomMap<V>(Dictionary<short, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_NestCustomMap<V>(Dictionary<short, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_NestCustomMap<V>(Dictionary<short, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_NestCustomMap<V>(Dictionary<short, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_NestCustomMap<V>(Dictionary<short, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_NestCustomMap<V>(Dictionary<short, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_NestCustomMap<V>(Dictionary<short, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_NestCustomMap<V>(Dictionary<short, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_NestCustomMap<V>(Dictionary<int, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_NestCustomMap<V>(Dictionary<int, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_NestCustomMap<V>(Dictionary<int, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_NestCustomMap<V>(Dictionary<int, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_NestCustomMap<V>(Dictionary<int, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_NestCustomMap<V>(Dictionary<int, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_NestCustomMap<V>(Dictionary<int, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_NestCustomMap<V>(Dictionary<int, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_NestCustomMap<V>(Dictionary<int, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_NestCustomMap<V>(Dictionary<long, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_NestCustomMap<V>(Dictionary<long, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_NestCustomMap<V>(Dictionary<long, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_NestCustomMap<V>(Dictionary<long, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_NestCustomMap<V>(Dictionary<long, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_NestCustomMap<V>(Dictionary<long, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_NestCustomMap<V>(Dictionary<long, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_NestCustomMap<V>(Dictionary<long, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_NestCustomMap<V>(Dictionary<long, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_NestCustomMap<V>(Dictionary<float, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_NestCustomMap<V>(Dictionary<float, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_NestCustomMap<V>(Dictionary<float, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_NestCustomMap<V>(Dictionary<float, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_NestCustomMap<V>(Dictionary<float, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_NestCustomMap<V>(Dictionary<float, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_NestCustomMap<V>(Dictionary<float, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_NestCustomMap<V>(Dictionary<float, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_NestCustomMap<V>(Dictionary<float, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_NestCustomMap<V>(Dictionary<double, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_NestCustomMap<V>(Dictionary<double, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_NestCustomMap<V>(Dictionary<double, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_NestCustomMap<V>(Dictionary<double, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_NestCustomMap<V>(Dictionary<double, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_NestCustomMap<V>(Dictionary<double, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_NestCustomMap<V>(Dictionary<double, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_NestCustomMap<V>(Dictionary<double, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_NestCustomMap<V>(Dictionary<double, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_NestCustomMap<V>(Dictionary<string, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<byte, V>(); //TODO:类型处理
                Read_byte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_NestCustomMap<V>(Dictionary<string, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<sbyte, V>(); //TODO:类型处理
                Read_sbyte_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_NestCustomMap<V>(Dictionary<string, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<bool, V>(); //TODO:类型处理
                Read_bool_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_NestCustomMap<V>(Dictionary<string, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<short, V>(); //TODO:类型处理
                Read_short_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_NestCustomMap<V>(Dictionary<string, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<int, V>(); //TODO:类型处理
                Read_int_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_NestCustomMap<V>(Dictionary<string, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<long, V>(); //TODO:类型处理
                Read_long_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_NestCustomMap<V>(Dictionary<string, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<float, V>(); //TODO:类型处理
                Read_float_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_NestCustomMap<V>(Dictionary<string, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<double, V>(); //TODO:类型处理
                Read_double_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_NestCustomMap<V>(Dictionary<string, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K1>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new Dictionary<string, V>(); //TODO:类型处理
                Read_string_CustomMap<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套list-set (基础类型)
        /// </summary>
        public static int Read_byte_byte_NestList(Dictionary<byte, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_NestList(Dictionary<byte, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_NestList(Dictionary<byte, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_NestList(Dictionary<byte, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_NestList(Dictionary<byte, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_NestList(Dictionary<byte, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_NestList(Dictionary<byte, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_NestList(Dictionary<byte, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_NestList(Dictionary<byte, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_NestList(Dictionary<sbyte, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_NestList(Dictionary<sbyte, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_NestList(Dictionary<sbyte, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_NestList(Dictionary<sbyte, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_NestList(Dictionary<sbyte, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_NestList(Dictionary<sbyte, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_NestList(Dictionary<sbyte, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_NestList(Dictionary<sbyte, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_NestList(Dictionary<sbyte, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_NestList(Dictionary<bool, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_NestList(Dictionary<bool, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_NestList(Dictionary<bool, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_NestList(Dictionary<bool, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_NestList(Dictionary<bool, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_NestList(Dictionary<bool, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_NestList(Dictionary<bool, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_NestList(Dictionary<bool, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_NestList(Dictionary<bool, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_NestList(Dictionary<short, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_NestList(Dictionary<short, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_NestList(Dictionary<short, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_NestList(Dictionary<short, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_NestList(Dictionary<short, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_NestList(Dictionary<short, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_NestList(Dictionary<short, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_NestList(Dictionary<short, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_NestList(Dictionary<short, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_NestList(Dictionary<int, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_NestList(Dictionary<int, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_NestList(Dictionary<int, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_NestList(Dictionary<int, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_NestList(Dictionary<int, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_NestList(Dictionary<int, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_NestList(Dictionary<int, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_NestList(Dictionary<int, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_NestList(Dictionary<int, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_NestList(Dictionary<long, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_NestList(Dictionary<long, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_NestList(Dictionary<long, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_NestList(Dictionary<long, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_NestList(Dictionary<long, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_NestList(Dictionary<long, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_NestList(Dictionary<long, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_NestList(Dictionary<long, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_NestList(Dictionary<long, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_NestList(Dictionary<float, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_NestList(Dictionary<float, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_NestList(Dictionary<float, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_NestList(Dictionary<float, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_NestList(Dictionary<float, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_NestList(Dictionary<float, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_NestList(Dictionary<float, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_NestList(Dictionary<float, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_NestList(Dictionary<float, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_NestList(Dictionary<double, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_NestList(Dictionary<double, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_NestList(Dictionary<double, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_NestList(Dictionary<double, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_NestList(Dictionary<double, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_NestList(Dictionary<double, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_NestList(Dictionary<double, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_NestList(Dictionary<double, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_NestList(Dictionary<double, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_NestList(Dictionary<string, List<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_NestList(Dictionary<string, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_NestList(Dictionary<string, List<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_NestList(Dictionary<string, List<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_NestList(Dictionary<string, List<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_NestList(Dictionary<string, List<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_NestList(Dictionary<string, List<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_NestList(Dictionary<string, List<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_NestList(Dictionary<string, List<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }

        public static int Read_byte_byte_NestSet(Dictionary<byte, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_sbyte_NestSet(Dictionary<byte, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_bool_NestSet(Dictionary<byte, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_short_NestSet(Dictionary<byte, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_int_NestSet(Dictionary<byte, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_long_NestSet(Dictionary<byte, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_float_NestSet(Dictionary<byte, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_double_NestSet(Dictionary<byte, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_byte_string_NestSet(Dictionary<byte, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_byte_NestSet(Dictionary<sbyte, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_sbyte_NestSet(Dictionary<sbyte, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_bool_NestSet(Dictionary<sbyte, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_short_NestSet(Dictionary<sbyte, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_int_NestSet(Dictionary<sbyte, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_long_NestSet(Dictionary<sbyte, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_float_NestSet(Dictionary<sbyte, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_double_NestSet(Dictionary<sbyte, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_string_NestSet(Dictionary<sbyte, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_byte_NestSet(Dictionary<bool, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_sbyte_NestSet(Dictionary<bool, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_bool_NestSet(Dictionary<bool, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_short_NestSet(Dictionary<bool, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_int_NestSet(Dictionary<bool, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_long_NestSet(Dictionary<bool, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_float_NestSet(Dictionary<bool, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_double_NestSet(Dictionary<bool, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_string_NestSet(Dictionary<bool, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_byte_NestSet(Dictionary<short, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_sbyte_NestSet(Dictionary<short, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_bool_NestSet(Dictionary<short, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_short_NestSet(Dictionary<short, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_int_NestSet(Dictionary<short, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_long_NestSet(Dictionary<short, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_float_NestSet(Dictionary<short, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_double_NestSet(Dictionary<short, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_string_NestSet(Dictionary<short, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_byte_NestSet(Dictionary<int, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_sbyte_NestSet(Dictionary<int, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_bool_NestSet(Dictionary<int, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_short_NestSet(Dictionary<int, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_int_NestSet(Dictionary<int, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_long_NestSet(Dictionary<int, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_float_NestSet(Dictionary<int, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_double_NestSet(Dictionary<int, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_string_NestSet(Dictionary<int, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_byte_NestSet(Dictionary<long, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_sbyte_NestSet(Dictionary<long, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_bool_NestSet(Dictionary<long, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_short_NestSet(Dictionary<long, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_int_NestSet(Dictionary<long, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_long_NestSet(Dictionary<long, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_float_NestSet(Dictionary<long, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_double_NestSet(Dictionary<long, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_string_NestSet(Dictionary<long, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_byte_NestSet(Dictionary<float, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_sbyte_NestSet(Dictionary<float, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_bool_NestSet(Dictionary<float, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_short_NestSet(Dictionary<float, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_int_NestSet(Dictionary<float, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_long_NestSet(Dictionary<float, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_float_NestSet(Dictionary<float, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_double_NestSet(Dictionary<float, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_string_NestSet(Dictionary<float, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_byte_NestSet(Dictionary<double, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_sbyte_NestSet(Dictionary<double, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_bool_NestSet(Dictionary<double, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_short_NestSet(Dictionary<double, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_int_NestSet(Dictionary<double, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_long_NestSet(Dictionary<double, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_float_NestSet(Dictionary<double, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_double_NestSet(Dictionary<double, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_string_NestSet(Dictionary<double, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_byte_NestSet(Dictionary<string, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<byte>(); //TODO:类型处理
                Read_byte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_sbyte_NestSet(Dictionary<string, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<sbyte>(); //TODO:类型处理
                Read_sbyte_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_bool_NestSet(Dictionary<string, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<bool>(); //TODO:类型处理
                Read_bool_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_short_NestSet(Dictionary<string, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<short>(); //TODO:类型处理
                Read_short_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_int_NestSet(Dictionary<string, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<int>(); //TODO:类型处理
                Read_int_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_long_NestSet(Dictionary<string, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<long>(); //TODO:类型处理
                Read_long_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_float_NestSet(Dictionary<string, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<float>(); //TODO:类型处理
                Read_float_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_double_NestSet(Dictionary<string, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<double>(); //TODO:类型处理
                Read_double_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_string_NestSet(Dictionary<string, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<string>(); //TODO:类型处理
                Read_string_Collection(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套list-set (自定义类型)
        /// </summary>
        public static int Read_byte_NestCustomList<V>(Dictionary<byte, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_NestCustomList<V>(Dictionary<sbyte, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_NestCustomList<V>(Dictionary<bool, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_NestCustomList<V>(Dictionary<short, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_NestCustomList<V>(Dictionary<int, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_NestCustomList<V>(Dictionary<long, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_NestCustomList<V>(Dictionary<float, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_NestCustomList<V>(Dictionary<double, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_NestCustomList<V>(Dictionary<string, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                var key = XBuffer.ReadString(buffer, ref offset);
                var val = new List<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }

        public static int Read_byte_NestCustomSet<V>(Dictionary<byte, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadByte(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_sbyte_NestCustomSet<V>(Dictionary<sbyte, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadSByte(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_bool_NestCustomSet<V>(Dictionary<bool, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadBool(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_short_NestCustomSet<V>(Dictionary<short, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadShort(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_int_NestCustomSet<V>(Dictionary<int, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadInt(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_long_NestCustomSet<V>(Dictionary<long, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadLong(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_float_NestCustomSet<V>(Dictionary<float, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadFloat(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_double_NestCustomSet<V>(Dictionary<double, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadDouble(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        public static int Read_string_NestCustomSet<V>(Dictionary<string, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            int count = XBuffer.ReadInt(buffer, ref offset);
            for (int i = 0; i < count; ++i)
            {
                //var key = XBuffer.Read<K>(buffer, ref offset);
                 var key = XBuffer.ReadString(buffer, ref offset);
                var val = new HashSet<V>(); //TODO:类型处理
                ReadCustomCollection<V>(val, buffer, ref offset);
                target.Add(key, val);
            }
            return offset;
        }
        #endregion


















		#region Write

        public static int WriteCustom<T>(T target, bool optional, bool hasVal, byte[] buffer, ref int offset) where T : Serializable
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    XBuffer.WriteInt(target.Sid, buffer, ref offset);
                    offset = target.Write(buffer, offset);
                }
            }
            else
            {
                XBuffer.WriteInt(target.Sid, buffer, ref offset);
                offset = target.Write(buffer, offset);
            }
            return offset;
        }

        public static int WritePrimitive(byte val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteByte(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteByte(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(sbyte val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteSByte(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteSByte(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(bool val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteBool(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteBool(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(short val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteShort(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteShort(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(int val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteInt(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteInt(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(long val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteLong(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteLong(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(float val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteFloat(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteFloat(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(double val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteDouble(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteDouble(val, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitive(string val, bool optional, bool hasVal, byte[] buffer, ref int offset)
        {
            if (optional)
            {
                XBuffer.WriteBool(hasVal, buffer, ref offset);
                if (hasVal)
                {
                    //XBuffer.Write<T>(val, buffer, ref offset);
    				XBuffer.WriteString(val, buffer, ref offset);
                }
            }
            else
            {
                //XBuffer.Write<T>(val, buffer, ref offset);
                XBuffer.WriteString(val, buffer, ref offset);
            }
            return offset;
        }

        public static int WriteCustomCollection<T>(ICollection<T> target, byte[] buffer, ref int offset) where T : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            int i = 0;
            foreach (var item in target)
            {
                if (item == null)
                {
                    LOGGER.Error("App.Proto.Test3.List has null item, idx == " + i);
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(item.Sid, buffer, ref offset);
                    offset = item.Write(buffer, offset);
                }
                i++;
            }
            return offset;
        }

        /// <summary>
        /// 基础类型 list-set
        /// </summary>
        public static int WritePrimitiveCollection(ICollection<byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteByte(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteSByte(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteBool(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteShort(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteInt(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteLong(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteFloat(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteDouble(item, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveCollection(ICollection<string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var item in target)
            {
                //XBuffer.Write<T>(item, buffer, ref offset);
                XBuffer.WriteString(item, buffer, ref offset);
            }
            return offset;
        }

        /// <summary>
        /// 自定义类型 dictionary
        /// </summary>
        public static int WriteCustomMap<V>(Dictionary<byte, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<sbyte, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<bool, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<short, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<int, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<long, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<float, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<double, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }
        public static int WriteCustomMap<V>(Dictionary<string, V> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                if (kv.Value == null)
                {
                    LOGGER.Error($"WriteCustomMap<{typeof(V).FullName}> has null item: {kv.Key.ToString()}");
                    XBuffer.WriteInt(0, buffer, ref offset);
                }
                else
                {
                    XBuffer.WriteInt(kv.Value.Sid, buffer, ref offset);
                    offset = kv.Value.Write(buffer, offset);
                }
            }
            return offset;
        }

        /// <summary>
        /// 基础类型 dictionary
        /// </summary>
        public static int WritePrimitiveMap(Dictionary<byte, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<byte, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<sbyte, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<bool, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<short, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<int, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<long, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<float, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<double, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, byte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, sbyte> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, bool> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, short> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, int> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, long> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, float> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, double> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WritePrimitiveMap(Dictionary<string, string> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //XBuffer.Write<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Value, buffer, ref offset);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套dictionary (基础类型)
        /// </summary>
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<byte, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<sbyte, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<bool, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<short, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<int, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<long, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<float, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<double, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<byte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<sbyte, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<bool, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<short, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<int, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<long, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<float, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<double, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveMap<V>(Dictionary<string, Dictionary<string, string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveMap(kv.Value, buffer, ref offset);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套dictionary(自定义类型)
        /// </summary>
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<byte, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<sbyte, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<bool, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<short, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<int, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<long, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<float, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<double, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<byte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<sbyte, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<bool, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<short, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<int, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<long, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<float, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<double, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomMap<V>(Dictionary<string, Dictionary<string, V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K1>(kv.Key, buffer, ref offset);
                //WriteCustomMap<K2, V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomMap<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套list-set (基础类型)
        /// </summary>
        public static int WriteNestPrimitiveList(Dictionary<byte, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<byte, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<sbyte, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<bool, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<short, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<int, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<long, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<float, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<double, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveList(Dictionary<string, List<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }


        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<byte, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<sbyte, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<bool, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<short, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<int, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<long, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<float, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<double, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<byte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<sbyte>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<bool>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<short>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<int>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<long>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<float>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<double>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestPrimitiveSet(Dictionary<string, HashSet<string>> target, byte[] buffer, ref int offset)
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                //WritePrimitiveCollection<V>(kv.Value, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WritePrimitiveCollection(kv.Value, buffer, ref offset);
            }
            return offset;
        }

        /// <summary>
        /// 嵌套list-set (自定义类型)
        /// </summary>
        public static int WriteNestCustomList<V>(Dictionary<byte, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<sbyte, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<bool, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<short, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<int, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<long, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<float, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<double, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomList<V>(Dictionary<string, List<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }

        public static int WriteNestCustomSet<V>(Dictionary<byte, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteByte(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<sbyte, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteSByte(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<bool, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteBool(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<short, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteShort(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<int, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteInt(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<long, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteLong(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<float, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteFloat(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<double, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteDouble(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }
        public static int WriteNestCustomSet<V>(Dictionary<string, HashSet<V>> target, byte[] buffer, ref int offset) where V : Serializable
        {
            XBuffer.WriteInt(target.Count, buffer, ref offset);
            foreach (var kv in target)
            {
                //XBuffer.Write<K>(kv.Key, buffer, ref offset);
                XBuffer.WriteString(kv.Key, buffer, ref offset);
                WriteCustomCollection<V>(kv.Value, buffer, ref offset);
            }
            return offset;
        }

        #endregion


	}
}